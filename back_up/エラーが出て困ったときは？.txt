#contents

* エラー対処の手法
ローカルで画像生成するにあたって、初めてプログラムが引き起こすエラーに対応するニキたちも多いはず。
そういう人にとってエラーへの対処は非常に大変なものであると考えられるため、その際の助けになるようエラー対処のある程度一般化した手法を示しておく。
そんなに具体性はないので指標程度に頼むで。

** 0. パスに日本語を含めない
このようなプログラムを扱う際のそもそもの前提として、本体の置き場所は「英数字(ASCII文字)のみの、空白を含めない、できるだけ短い名前の場所」が鉄則。
これができていないとたまに原因不明のエラーを引き起こすことがある。
このようになっていない場合、次回の起動の前にリネームなり移動なりしておこう

×悪い例： C:\画像\なにかすごく 長い名前\深いディレクトリ\Very Very Long Directory Name With White Space And MultiByte\stable-diffusion-webui
〇いい例： C:\ai\stable-diffusion-webui

理由の説明
[+]
- 英数字のみ: 英語圏のプロジェクトでは、パスに日本語が含まれているだけで起動できないものがいくつもある。いわゆる文字化けが原因の一つ。主にエンコードの問題などなので、素直に英数字だけにしよう
- 空白を含めない：各種コマンドにおいて、空白はコマンドオプションの区切りを表す。つまりパスに空白が含まれているとそこでパスが終わっていると解釈される可能性がある。コマンド側のプログラムが注意深く作られていれば問題ないことが多いが、あえてリスクを冒す必要はないので空白は入れないようにしよう
- できるだけ短い名前：WindowsAPIでは、歴史的経緯でパスの長さに260文字制限がある。多くのプログラムがこの挙動に依存しており、Python自身も例外ではない（設定で外すことはできる）。通常のファイルシステム上では問題ないが、念のため本体はできるだけ浅い階層の、短い名前のフォルダに置くようにしよう
[END]

具体例
- OpenCV2: 日本語非対応
- zipファイル: OSをまたがった日本語ファイル名が文字化けする。 ~~ &size(11){※日本語版WindowsがShift-JISで、それ以外のOSが基本的にUTF-8を使っているため発生する。}

** 1. エラー文を読む＆エラー文で検索する
まず最も重要、かつこれさえできればだいたいどうにかなるというのが「エラー文を読む＆エラー文で検索する」こと。
いきなり英語でごちゃごちゃ出てくるので面食らうが、よく見ればそこにそのまま対処法が乗っていたりする。読めないときはDeepLにでも突っ込んどけばおｋ。

ただし初めてエラー文をちゃんと読むことになる人は「そもそも文章長すぎるしどこが要点なのかわかんないッピ！」ということが殆どであると思う。
なので以下のようなサイトをまず見て、エラーの読み方をつかんでおこう（これはPythonについてのみのページだが、画像生成でぶち当たるエラーは大抵Python関連なのでとりあえずこれ読んでおけばおｋ）。
- Pythonのエラーの見方とよくあるエラー - https://gammasoft.jp/support/frequently-python-error/

読んでもエラーが解決できない場合はエラー文で検索する。大抵の場合エラー文の一番最後の行をコピペしてググればそれっぽいのが出てくる。
この際エラー文の中に自分の環境固有の値（例えば自分のファイルの名前とか）があるなら、それを除いて検索すると精度が上がることが多い。
このwikiの右上のwiki内検索や、5chの本スレの過去ログ検索、またdiscordコミュニティに属していればdiscord内検索もしてみよう。

また画像生成関連では、個人が配布しているプログラムがエラーの原因である場合も多いため、その際は配布者の公式ページ内で調べるとそのまま正解が書いてあったりする。
基本的にプログラムはgithubで配布されてることが多いと思われるので、該当のgithubのページまで飛んで、右上の「Search」欄にエラー文の単語を入れて検索すると良いだろう。

具体例
- accelerate pythonのエラーメッセージが隠れてしまうのでエラー発生時はpythonを直接呼び出すと良い

*** ChatGPTやBingチャットを使う
エラー文をChatGPTやBingチャット、perplexityなどのAIチャットサービスに入れて「解決策は？」と質問をする
割とそれらしい回答をしてくれるので、それを実施する
尚、ChatGPTは間違った事も平然と正しい様に答える癖があるので、無闇な過信は禁物
うそはうそであると見抜ける人でないと(ChatAIを使うのは)難しい

** 2. 公式ドキュメントを読む
1と同じくらい重要なのが、「公式ドキュメントを読む」こと。
ドキュメントと一口に言っても、wikiやらREADMEやら色々あるが、とりあえず使ってるツール・プログラム・サービスの公式サイトに行けば「これ読んどけ」と提示してるものがあるのでそれを読むこと。
エラー文で検索してあちこちサイトを見て回ったけど公式ドキュメントを見たらそのまま答えが書いてあった、というのは多々あるので心に留めておこう。
ちなみに個人でプログラムを配布してる人はそういうの作ってない場合も多いので、それはそれ。

以降は1,2を踏まえてのもう少し具体的な事例を挙げる。

** 3. 入力ミス
あるあるなのがちょっとした入力ミス。基本的にこういうのは融通が効かないので、大文字小文字の違いなどは容赦なくエラー扱いになる。
またハマりがちなのはスペース関係。文字列と文字列の間に必要なスペースを入れてなかったり、スペースの数が多すぎたり、半角スペースであるべきなのに全角で入力してしまったり…などがある。見えないので混乱しやすい。
他にもいろんな入力ミスはあるが、公式に「このコマンド打っとけ！」と言われているのなら、とりあえずそれをコピペして打ち込むのが安定だろう。ただしそれがミスってる場合もあるので、その上でのチェックもした方が良い。
困ったらとりあえずコマンドオプションを必須のもの以外すべて外した最小限のもので試してみるのがオススメ。それでうまくいかなければ原因は他の場所にあるかもしれない。

具体例
- nvidia公式 インストール用のコマンドに改行コードがついてないのでそのままコピペするとエラーになる
- (ここにユーザー名を入れる) みたいな指示をそのままコピペして失敗してるケースかある
- （windowsの場合）powershellで打つべき内容をコマンドプロンプトで打っている（またはその逆）と上手く行かないことがある


** 4. 必要なライブラリ・ファイルがない
PyTorchが必要なのに入ってないとか、VAEが必要なのに用意してなかったとかそういうの。これは公式ドキュメントを端から端まで読むのが吉。
微妙に名前の違うライブラリとか入れてしまってないか、ファイルの置き場所を間違っていないか、よく確認しよう。

入れる順番
+ venv内にpipで入れる(これで完結できるのがベスト)
+ 何かのファイルを設置する、差し替える
+ aptやインストーラーなどでOSに入れる(環境が汚れる)

** 5. パスが通ってない
パスとはファイルやフォルダがどこにあるかを指し示したもので、これが正しく設定されていない、つまりパスが通っていないと、PCはどこにプログラムやプログラムの実行対象があるのか参照できずにエラーを起こす。
例えば「python hoge.py」というコマンドでhoge.pyを実行することが出来るのは、「python」と打ち込めばhoge.pyを実行するためのpython.exeの場所を参照するよう設定されているから。
パスが通ってない、または間違っていると、別のバージョンのpythonを起動してエラーを起こしたり、全然関係ないところにライブラリがインストールされて参照できなかったり、他にもpythonに限らず様々なエラーが起こる。
このエラーは、なんか一部はうまく動いたりするので、エラー対応に慣れてないと非常に対処がめんどくさい。が、「他のエラーはだいたい潰したはずだけどなんか動かないんだよな…」という場合は大体の場合これが原因である。
プログラムを実行してエラーが出る場合はコマンドなどのパスが通っているか調べたり（パスが通ってるか調べる方法を知らなければそれもググれ！）、あとは「パス 通す」「環境変数 設定」などで調べたりすれば対応できるはず。

具体例
- venvを使う場合はpythonのpathを変えないといけない(そのためにactivateする)
- 1111のインストーラー、スタンドアロンセットアップ改、あかちゃんインストーラーではわざとpathが通ってない
- Colabやpaperspaceでは違うバージョンのpythonにpathが通っているので一見動いたように見えて動いてないこともある

** 6. 推奨環境・推奨バージョンじゃない
機械学習関連だと非常に起こりやすいのがこのエラー。機械学習においてはどれか1つのライブラリのバージョンが少しでもズレると一切動かないということがよくあるため、公式に定められた環境・バージョン指定を厳密に守る必要性が特に高い。
その上でそれぞれの実行環境に応じたライブラリの導入が必須というのも多く、こちらは自分で自分に合ったもの調べるしか無いのでつまづきやすいところである。
これについては、公式のライブラリ開発者の推奨する組み合わせだと逆にうまくいかず、実行したいプログラムを配布してる人の設定でないと動かない…なんてこともあり得るのが本当にめんどくさい。
丁寧にチマチマしたバージョンの数字確認なんかをするより他ないが、なあなあにしてるといつまで経っても動かない部分なので、推奨環境・推奨バージョンをキッチリ調べて揃えよう。

具体例
- python 3.12を入れてはいけない

*** 6-1. Anacondaの干渉
Anacondaはpipが入ってなかったりと通常のPythonとは大きく異なるため、エラーの原因になりやすい。
Anacondaが入ってる状態ではPython単体をインストールしてもAnaconda側のPythonが参照されたりするので、Anacondaをアンインストールしておこう。

** 7. 権限設定ミス
ファイルを実行する権限がないためにエラーが起こることもある。「（管理者）権限 設定」などで調べれば対応できるはず。
wiki内にも権限についていくらか記述がある。ぶっちゃけ必要になるのはwikiに書かれている状況の時くらいかも。

具体例
- 1111を入れた外のディレクトリのファイルを操作するには --administrator コマンドラインオプションが必要らしい

** 8. どうしようもない（スペック不足・根本的な仕様）
死ぬほど頑張ってエラーについて調べても、PCスペックやプログラムの根本的な仕様などによりどうしようもない場合はある。特に機械学習関連はスペックがすぐさま動作に影響するため、思ったよりどうしようもないパターンは多い。
"CUDA Out of memory"などはまさに、グラボのメモリが物理的に不足している場合に起こる。
ただし自分と同じ環境で成功している人がいるなら、まだエラーを掘り下げられていないだけの場合がかなり多い。その場合はもう一度検索などに立ち返って頑張ってみよう。

*** 8-1. WSL2もしくはWindows側など試してないほうの環境で動作を試す(上級者向け)
こちらの内容はちょっと難しいので少なくとも「WSL2(Linux)がよくわかんない」「黒い文字ばっかりの画面怖い」って人はスルー推奨。
素直にもう少し良いマシンを用意したりパーツを買ってきてアップグレードましょう。
[+]以下shellの一つくらいググればどうにでもなる人へ向けた覚書
たまにだが
- Windows環境ではVRAMが足らずに動かなかったがよく最適化されているWSL2側なら動いた
- WSL2ではメモリ不足で落ちたがWindows側なら動いた
というパターンがあるので、普段使ってるのと反対の環境で試すのは(難易度は高いが)手としてはあり。
WSL2側はWindows本体に比べてVRAM周りは最適化によって有利になりやすいが、反面通常のメモリは設定を工夫しないとカツカツになりやすく、
設定を工夫してもマシンのメモリが32GBくらいまでだとWSL2側へ十分な量を割り振れないことが多い。
ついでに書いとくとデフォルトのWSL2へのメモリ割り当てはデフォルトの最大が8GBらしいので割り当て設定をしないとかなりの確率でメモリ不足になる、割り当てについては[[1111_WSL2]]を読んだりググろう。
特にSD2系モデルなどはメモリ食いなのでメモリ32GBのマシンでWSL2へ24GB割り振ってもモデルサイズによっては不安定になることもある。(64GBマシンで48G割り当てると安定して動作している。)
ストレージに余裕があるなら両方の環境を作ってもいいかもしれない。
(参考にこの文の編集者の環境書くと両構築の上、WSL2側のStable-diffusionフォルダをWindows側のStable-diffusionフォルダへのシンボリックリンクにすることでmodelのストレージをケチって構築して一応動作はしている)
[END]

*** 8-2. NansException: tensorなんとかって出る場合
1111の最新版では黒画像の条件を満たすとエラーを発生させるようになっている。
VAEやU-Netの計算ミスが原因で、VAE、使用中のLoRAなどによって発生率が異なる。
Batch count/sizeを上げて複数生成中に出てきて生成を止める厄介者でもある。

まずはwebui-user.batファイルをメモ帳なので開き、「set COMMANDLINE_ARGS=」の後ろに次のオプションを指定する。
エラーメッセージにVAEと書いていたら「--no-half-vae」、U-Netなら「--no-half」。
代償としてVRAM消費が増加し生成速度が低下する。パラメータを変更していないのにも関わらず突然エラーになりだしたら再起動する。
エラーで生成を止められるのが嫌なら起動引数に--disable-nan-checkを追加するといい。従来の黒画像を出力する仕様に戻る。
他のVAEを使ってみるのもいい。NovelAIのVAEは真っ黒/エラーになりやすい気がする。


** 9. 本体を最新版にアップデートする
そのエラーはすでにバグとして認識されていて、開発者が既に修正済みかもしれない。
git pullなりして最新版にアップデートしてもう一度やってみよう。
ただし、下記の理由から1111の怒涛の更新ラッシュ中は数日待ってからgit pullしたほうが安全。
*** 9-1. 本体を少し前のバージョンにロールバックする
上の内容と少し矛盾するようだがautomatic1111/webuiはアップデートの頻度が尋常じゃなく早く、次々新機能が追加されるがそれと引き換えに結構不安定な一面も持つ。
特に大きな機能が追加された直後は不安定で普通に動かないことが多いため、スレとかで不具合らしき書き込みが多い場合は、数日程度はちょっと前のバージョンを使うほうが安定することもある
少しgitの知識が必要になる。コマンドラインがわからん場合はSourcetreeやGitHub Desktopとかvisualstudio codeのgit拡張機能(Git Graph等)を使って操作するとわかりやすいかもしれない。
細かい内容は各種キーワードでググろう。
*** 9-2. Extensionを一時的に無効化(退避)する
一部のExtensionが「本体のアップデートに追従できない」「新しい本体バージョンに対応して古い本体バージョンと互換性がなくなった」「アップデートのたびに再インストールしないとおかしくなりやすい」「ほかのExtensionと相性が悪い」etc…
と言った感じでExtensionが悪さをしていることがある。%%特にDreamBoothやHypernetwork-MonkeyPatch-Extensionは複雑なためかトラブる頻度が高め%%(今はもう使ってる人いない？)
一度「stable-diffusion-webui\extensions」内のフォルダ一式を別のフォルダに移動して退避するなどしてExtensionなしの状態で起動できないかを確認する。
起動する場合よく使うExtensionをちょっとずつもとのフォルダに戻したり再インストールするなどして様子を見よう。
*** 9-3. なんか必須のファイルが増えてないか確認する(一部バージョンのバグ)
少し前の内容と被るが、アップデート直後の初期化設定などで「特定のファイルがないと動かないのに初期設定ファイルに必要な設定が同梱されてない」みたいなことはちょくちょくある。
クラウドならエラーを調べて足りないものを入れればOK。
ローカルの場合、大抵は仮想環境(Python)上にインストールする必要があるから「.\venv\Scripts\activate」(Windows) or「source ./venv/bin/activate」(Linux)を忘れずにやって仮想環境に入ってから該当コマンドを入力しよう。
*** 9-4. Extensionの更新
1111のWebUIからでは正しく更新できないことがあるので、必要に応じてバックアップを取ってから拡張機能本体のフォルダを削除してから再インストールする。

** 10. 再起動する
本体を再起動しないと反映されないextensionもある。本体を再起動してみよう。
それでもダメな場合、他のプロセスが悪さしてる可能性もないとは言えない。念のためPC自体も再起動しよう。

具体例
- pip installで権限エラーが出る場合はファイルロックが腐った可能性がある。再起動すればなおる。

** 11. もう一度最初から環境構築する
いろいろいじってディレクトリ構造がおかしくなってるかもしれない。もしくは、仮想環境にパッケージをインストールするつもりで実環境のほうをいじってたりして依存関係が狂っているかもしれない。
今の場所とは別のフォルダでもう一度まっさらな環境でやってみて上手く行くか試してみよう。

具体例
- venvが狂った場合
-- venvをリネームして作り直す。余計悪化したらリネームを元に戻す。
- ダウンロードに失敗してる場合
-- cacheを消す
-- 手動でダウンロードして置き換えてみる
- 誤ったバージョンのインストーラが悪さをしている例
-- python, Git, cuda関連など
-- インストーラはOSに対して1つしかインストールできない
-- 個別に入れたファイルよりOSに入れたバージョンが優先される可能性がある
-- アンインストーラーを使って削除する必要があるが、動いてたものまで動かなくなる恐れがある

*** 仮想環境ツールの制約

具体例
condaでしか動かないものをpipで動かそうとすると苦労する。
Python 3.10とかxformersとか。
最近はコンパイル不要になりつつあるので頑張ってpipに移行して欲しい。

同様に、Dockerとかも特定のものを動かすにはいいかも知れないけど、
それを改造していろいろ動かそうとすると無理だったりする。

こういうのが原因で動かなくなってる時、アンインストール方法がわからないなら、
OSから入れ直したほうが早いってことにもなりかねない。

** 12. セキュリティソフトの誤作動
3月20日あたりからWindowsDefenderがtorchのPickleTensorファイル(.pt/.ckpt)をマルウェア扱いで勝手に消してエラーで動かなくなる場合がある。どう考えても誤検出。
急にエラーで動かなくなった後Windows側で脅威を検出しましたとか出たらそれが原因。消されたファイルはWindowsセキュリティで許可してやれば復活する。
-1111のリポジトリ内でセキュリティを発動させないようにする方法
設定→プライバシーとセキュリティ→ウイルスと脅威の防止→ウイルスと脅威の防止の設定→除外の追加または削除→除外の追加で1111のフォルダを追加する。

** わりと根気が大事
エラーに対応していると「こんなクソめんどくせえことマジでみんなやってんのけ？」となるが、大体そんなもんである。
色んな人がツールとか作ってくれてるので普段気にならないが、中心にあるのは最先端の技術なので、エラー周りのめんどくさい度はかなり高い。ので根気は必要になる。
とはいえ楽しい画像生成で消耗しても仕方がない。めんどくさくなったら適当に画像作って遊んで、思い出した時にまた対処すれば良いだろう。

----

* 質問をするときの注意点
前例のないエラーの情報を共有することは他の人の助けにもなる。どうしても解決できない場合は、質問してみよう。
ただし、質問するときは、具体的、かつ詳細に質問しよう。
エラーは環境によって種類も対策も千差万別なので、曖昧で情報がない質問は答えたくても答えようがなく、結果スルーされる。
例えば、以下のような情報が多いほど答えやすく、少ないほど答えにくい。

- 出ているエラーメッセージ（テキストまたはスクショ）''※これがないと本当に答えようがない。必須項目''
- どのページを見ながらやっているか
- 質問するまでに試したこと
- OSやpythonのバージョン
- 本体のバージョン（コミット日時）

** &#128581;&#8205;♂&#65039;悪い質問の例

 LoRAの環境構築しようとしたらエラーが出ました。どうすればいいのか教えてください。

エラーと言っても何のエラーか分からないから答えようがない。
そもそもLoRAもDreamBoothのLoRAなのかfinetuneのLoRAなのか、GUIなのかCUIなのかも書かれておらず、
これを解決に導くためには非常に長いラリーが必要になることが予想され、答える側のやりたい事を削ってまで回答しようと思えない。スルー。

** &#128582;&#8205;♂&#65039;良い質問の例

>https://seesaawiki.jp/nai_ch/d/Dreambooth-LoRA ~~
>このページを見ながらLoRAの導入を試しているんですが、accelerate config のあとの質問に答えるところの最後、fp16を選ぼうとして下矢印キーを押したら、以下のエラーが出ました ~~
>（※ここにスクショか、エラーメッセージを張り付けたURLを貼る） ~~
>上キーや左右キーを押しても同じで、エラーメッセージでググって何も出てこなくて、chatGPTに聞くと〇〇と提案されたのですが、それをやってもダメでした。 ~~
>何か解決策はありませんか？ ~~
>環境はWindows10、 Python3.10.9、本体は今日の最新です。 ~~

どこで詰まってるのかがはっきりしていて、試したことや環境も書かれている。
不明点も短いラリーで解消できそうなので答えやすい。

なお、良い質問の例のように聞いたとしても、（当たり前だが）必ず答えが返ってくるわけではない。めげずに調査を続けよう。

もし自己解決できた場合は、単に「自己解決しました」と書いてもいいが、「さっきの〇〇の件ですが、××したら解決しました」と、解決理由も書いておくと、後で同じエラーに遭遇した人の助けになるので、できれば解決方法も書き残そう。

** 試せば結果が分かる質問はまず試してから

- 〜〜をやれば上手く行きますか？
- ○○と××どっちのほうがうまくいきますか？

こういう質問は、質問して答えを待つより自分で試したほうが早い。（上記の通り、環境や他の条件によって結果が変わることが多いからアドバイスが難しい）
試したうえで、「〜〜をやったんですが、こうこうこういう条件でこうなってしまったので、これを解決する方法はありませんか？」と聞いたほうがいい反応を得られる確率が高い。

そもそもの話、生成AI自体が最先端技術なので、確固たる答えが確立されてないもののほうが多いのが現実。
答えを聞くよりも、「自分がこういう条件で試した結果、こうなりました」という報告をするほうがスレ民に喜ばれる。 検証結果なんてナンボあってもいいですからね。
その報告をもとに、誰かがさらに発展した調査をしてくれるかもしれない。
これでニキも最先端リサーチャーの一員や。

*エラー解決のメモ
としあきdiffusion Wiki > エラー解決メモ https://wikiwiki.jp/sd_toshiaki/%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA%E3%83%A1%E3%83%A2
今んところリンクだけ

 













