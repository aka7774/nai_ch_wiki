* 概要

* ドキュメント

- Automatic1111の使い方│Features &#183; AUTOMATIC1111/stable-diffusion-webui Wiki - https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#prompt-editing


* News
Stable Diffusion / NovelAI 関連情報共有サイト
ここにいけばだいたいなんでも分かる。「今日の事件」など
毎日更新されるので定期的に見ることを推奨
+ https://rentry.org/sdupdates
+ https://rentry.org/sdupdates2
+ https://rentry.org/sdupdates3

ダウンロードとその他のリンクはこちら
SD RESOURCE GOLDMINE (Non-News) - https://rentry.org/sdgoldmine


* エラー対処の手法
ローカルで画像生成するにあたって、初めてプログラムが引き起こすエラーに対応するニキたちも多いはず。
そういう人にとってエラーへの対処は非常に大変なものであると考えられるため、その際の助けになるようエラー対処のある程度一般化した手法を示しておく。
そんなに具体性はないので指標程度に頼むで。

** 1. エラー文を読む＆エラー文で検索する
まず最も重要、かつこれさえできればだいたいどうにかなるというのが「エラー文を読む＆エラー文で検索する」こと。
いきなり英語でごちゃごちゃ出てくるので面食らうが、よく見ればそこにそのまま対処法が乗っていたりする。読めないときはDeepLにでも突っ込んどけばおｋ。

ただし初めてエラー文をちゃんと読むことになる人は「そもそも文章長すぎるしどこが要点なのかわかんないッピ！」ということが殆どであると思う。
なので以下のようなサイトをまず見て、エラーの読み方をつかんでおこう（これはPythonについてのみのページだが、画像生成でぶち当たるエラーは大抵Python関連なのでとりあえずこれ読んでおけばおｋ）。
- Pythonのエラーの見方とよくあるエラー - https://gammasoft.jp/support/frequently-python-error/

読んでもエラーが解決できない場合はエラー文で検索する。大抵の場合エラー文の一番最後の行をコピペしてググればそれっぽいのが出てくる。
この際エラー文の中に自分の環境固有の値（例えば自分のファイルの名前とか）があるなら、それを除いて検索すると精度が上がることが多い。

また画像生成関連では、個人が配布しているプログラムがエラーの原因である場合も多いため、その際は配布者の公式ページ内で調べるとそのまま正解が書いてあったりする。
基本的にプログラムはgithubで配布されてることが多いと思われるので、該当のgithubのページまで飛んで、右上の「Search」欄にエラー文の単語を入れて検索すると良いだろう。

** 2. 公式ドキュメントを読む
1と同じくらい重要なのが、「公式ドキュメントを読む」こと。
ドキュメントと一口に言っても、wikiやらREADMEやら色々あるが、とりあえず使ってるツール・プログラム・サービスの公式サイトに行けば「これ読んどけ」と提示してるものがあるのでそれを読むこと。
エラー文で検索してあちこちサイトを見て回ったけど公式ドキュメントを見たらそのまま答えが書いてあった、というのは多々あるので心に留めておこう。
ちなみに個人でプログラムを配布してる人はそういうの作ってない場合も多いので、それはそれ。

以降は1,2を踏まえてのもう少し具体的な事例を挙げる。

** 3. 入力ミス
あるあるなのがちょっとした入力ミス。基本的にこういうのは融通が効かないので、大文字小文字が違いなどは容赦なくエラー扱いになる。
またハマりがちなのはスペース関係。文字列と文字列の間に必要なスペースを入れてなかったり、スペースの数が多すぎたり、半角スペースであるべきなのに全角で入力してしまったり…などがある。見えないので混乱しやすい。
他にもいろんな入力ミスはあるが、公式に「このコマンド打っとけ！」と言われているのなら、とりあえずそれをコピペして打ち込むのが安定だろう。ただしそれがミスってる場合もあるので、その上でのチェックもした方が良い。

** 4. 必要なライブラリ・ファイルがない
PyTorchが必要なのに入ってないとか、VAEが必要なのに用意してなかったとかそういうの。これは公式ドキュメントを端から端まで読むのが吉。
微妙に名前の違うライブラリとか入れてしまってないか、ファイルの置き場所を間違っていないか、よく確認しよう。

** 5. パスが通ってない
パスとはファイルやフォルダがどこにあるかを指し示したもので、これが正しく設定されていない、つまりパスが通っていないと、PCはどこにプログラムやプログラムの実行対象があるのか参照できずにエラーを起こす。
例えば「python hoge.py」というコマンドでhoge.pyを実行することが出来るのは、「python」と打ち込めばhoge.pyを実行するためのpython.exeの場所を参照するよう設定されているから。
パスが通ってない、または間違っていると、別のバージョンのpythonを起動してエラーを起こしたり、全然関係ないところにライブラリがインストールされて参照できなかったり、他にもpythonに限らず様々なエラーが起こる。
このエラーは、なんか一部はうまく動いたりするので、エラー対応に慣れてないと非常に対処がめんどくさい。が、「他のエラーはだいたい潰したはずだけどなんか動かないんだよな…」という場合は大体の場合これが原因である。
プログラムを実行してエラーが出る場合はコマンドなどのパスが通っているか調べたり（パスが通ってるか調べる方法を知らなければそれもググれ！）、あとは「パス 通す」「環境変数 設定」などで調べたりすれば対応できるはず。

** 6. 推奨環境・推奨バージョンじゃない
機械学習関連だと非常に起こりやすいのがこのエラー。機械学習においてはどれか1つのライブラリのバージョンが少しでもズレると一切動かないということがよくあるため、公式に定められた環境・バージョン指定を厳密に守る必要性が特に高い。
その上でそれぞれの実行環境に応じたライブラリの導入が必須というのも多く、こちらは自分で自分に合ったもの調べるしか無いのでつまづきやすいところである。
これについては、公式のライブラリ開発者の推奨する組み合わせだと逆にうまくいかず、実行したいプログラムを配布してる人の設定でないと動かない…なんてこともあり得るのが本当にめんどくさい。
丁寧にチマチマしたバージョンの数字確認なんかをするより他ないが、なあなあにしてるといつまで経っても動かない部分なので、推奨環境・推奨バージョンをキッチリ調べて揃えよう。

** 7. 権限設定ミス
ファイルを実行する権限がないためにエラーが起こることもある。「（管理者）権限 設定」などで調べれば対応できるはず。
wiki内にも権限についていくらか記述がある。ぶっちゃけ必要になるのはwikiに書かれている状況の時くらいかも。

** 8. どうしようもない（スペック不足・根本的な仕様
死ぬほど頑張ってエラーについて調べても、PCスペックやプログラムの根本的な仕様などによりどうしようもない場合はある。特に機械学習関連はスペックがすぐさま動作に影響するため、思ったよりどうしようもないパターンは多い。
ただし自分と同じ環境で成功している人がいるなら、まだエラーを掘り下げられていないだけの場合がかなり多い。その場合はもう一度検索などに立ち返って頑張ってみよう。


** わりと根気が大事
エラーに対応していると「こんなクソめんどくせえことマジでみんなやってんのけ？」となるが、大体そんなもんである。
色んな人がツールとか作ってくれてるので普段気にならないが、中心にあるのは最先端の技術なので、エラー周りのめんどくさい度はかなり高い。ので根気は必要になる。
とはいえ楽しい画像生成で消耗しても仕方がない。めんどくさくなったら適当に画像作って遊んで、思い出した時にまた対処すれば良いだろう。

----

