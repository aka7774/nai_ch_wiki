学習は別のでやる流れだけど生成には便利に使えるはず。

- [[ローカルをクラウドで]]
- [[学習用Notebook>kohya_train_network_simple]]

#contents

* 最新版はこちら

今後はNotebookを更新していきます。

- https://colab.research.google.com/drive/1GhvterZebPlZU4P7RcUK-U-4Y23rZpQO

** 更新について

pipの問題で動かなくなりがちなのでコメント等を見るといいかも。

** 更新履歴

*** 2023-03-19

- torch2に対応しました。めちゃ速くなるので楽しい。
- xformersを入れなくできるようにした(torch2では不要だし)
- 環境調査をスキップできるようにした
- Extensionsを更新(LyCoris動かす用など)
- --enable-insecure-extension-accessを入れられるようにした

*** 2023-03-16

- Pythonのバージョン指定を次の3つに変更しました
-- Python 3.9.16 Colabデフォルト 時短になるのでおすすめ
-- Python 3.10.9 use_conda 最新版を入れるので将来おかしくなる可能性あり 今3.9だと困る場合にどうぞ
-- Python 3.10.10 use_apt 従来通り。今はうまく動いていない?
- Python 3.9.16選択時にはデフォルトのtorchを使うようにしました 時短
- 環境チェックを厳格にしてRuntimeErrorを返すようにしました

*** 2023-02-15

- ControlNet(fp16)に対応しました
- 学習は[[kohya_train_network_simple]]で出来るのでExtensionを外しました
- fastapiのバージョンを0.90.1に固定しました
- Pythonが3.10.10になってました(悪影響は無いはず)

segがエラーで動かんなあ。prettytableは入れたつもりなんだけど。
 ModuleNotFoundError: No module named 'lib2to3'

*** 2023-01-24

- Python 3.10にきちんと対応(xformersがすんなり入るよ、やったね)
- モジュールのバージョンをあげました
- 流行りのExtensionsに入れ替え(面倒なので今後はやらんかも)
- モデルのURLをVAE内蔵の7th3Aにしました(ダウンロードが早く済むはず)

*** 2023-01-14

- images_browserを修正版に取り替えた
- その他こまごまとExtensions追加

*** 2022-12-20

- condaかpipか選べるようにした。エラー出た時の予備になるかも？
- 階層マージ遊びが出来るExtensionをインストールできるようにした(たぶん4GBのモデルならいける)
- モデルのURLを3つまで入れられるようにした(もっと入れたければ改造して)
- SD2.0系は未対応(需要あれば対応する)

* 初心者向け手順

+ Googleアカウントを用意する(普段使いとは分けるのがおすすめ)
+ 次のページを読んで基礎を理解する
++ https://www.python.jp/train/experience/colab.html
++ https://www.python.jp/train/experience/exec-python1.html
+ 「1+1」のかわりに %%以下の黄色い枠内の内容をコピペして%% 上のリンク先のnotebook内容をコピーして実行
+ 実行結果に「Running on public URL: https://xxxxx.gradio.live」と出てくるのでそこに飛んで、usernameとpasswordを入力する
++ usernameはデフォルト実行ならuser。passwordは自動生成されているので「Launching Web UI with arguments:」の行を参照

** 注意

*** Notebookを新規作成できたら、最初に Rumtime - Change runtime type で GPU を選ぶ

もう最初っから選ばれてるかも。

[[&ref(https://image02.seesaawiki.jp/n/h/nai_ch/ruRG6Pge9t-s.jpg)>https://image02.seesaawiki.jp/n/h/nai_ch/ruRG6Pge9t.jpg]]

*** このNotebookではいくつかのExtensionが自動インストールされる

- 重たいやつはチェックボックスで入れるかどうか選べる

*** モデルを増やしたい時はFilerでダウンロードしよう

ダウンロードしたいモデルのURLを用意しましょう

[[&ref(https://image02.seesaawiki.jp/n/h/nai_ch/BpmoNSigEj-s.png)>https://image02.seesaawiki.jp/n/h/nai_ch/BpmoNSigEj.png]]

*** Google Driveのマウントはしなくても動かせるのでお好みで

- マウントしないと全部消えるので後腐れが無い
- マウントするとデータの保存が楽になる


* 赤ちゃん用Notebook
グラボもねえ!知識もねえ!金もそれほど持ってねえ!
でもローカル使ってみたいンゴ・・・！という人でも使える(かもしれない)Notebookが公開されている
上記の入門用Notebookですらうまくいかなかった人用
''※高頻度で更新されているので、このページの説明と違う箇所もあるかもしれない''
[+]
camenduruという人が公開しているNotebookを使用する
Colabを使う関係上Googleアカウントは必須。それ以外は特に不要
+Googleアカウントを取得
+https://github.com/camenduru/stable-diffusion-webui-colabにアクセス
++ページを下にスクロールしColabの項を見つける
++多数のNotebookが用意されているので使いたいものをOpen in Colabで開く。とりあえずliteでおｋ。AOMに7th、実写スキー御用達のchilloutなどなど
++好きなものを選べばいいのだが、とりあえず例としてabyss_orange_mix_3_webui_colabを選択する(分かりやすく綺麗なイラストが出るモデルなので)
+Open in ColabをクリックするとColabの画面に移動する。RuntimeをGPUに変更し、コード上の再生ボタンを押すとインストールが始まるので放置(当方ではAOM3のインストールに10分くらいかかった)
+インストールが完了すると最終行付近に3つのURLが表示される。Running on ''public'' URLを開くとついにローカル起動!
+左上のチェックポイントから使いたいモデルを選ぶ(とりあえずAOM3A1がおすすめ)。あとはsettingsタブのSD VAEでorangemixを選びAplly Settings
++VAE指定を手動で選ばないと絵が灰色っぽくなるぞ
+あとはプロンプト入力で赤ちゃんから妖精さんに進化するだけ
++設定や推奨クオリティプロンプトや記述方式なんかは他のローカルと共通だからwiki読み込んで調べてください
++ローカルUIが開いたからってColabは閉じちゃだめよ。画像生成の進捗状況はColab上で出る。Generate押すとColabにパーセンテージが表示されるよ
[END]

* 入門用Notebook(旧バージョン)

[+]
=|BOX|
#@markdown 実行は自己責任で。

#@markdown 最初に Rumtime - Change runtime type で GPU を選ぶ

#@markdown gradioログイン情報(パスワード空白時は自動生成)
user = "user"#@param {type:"string"}
password = ""#@param {type:"string"}

# GPUの情報表示
!nvidia-smi
!nvcc -V

# RAMとVRAMの容量取得(GiB)
res = !free -m | grep 'Mem:' | awk '{print $2}'
if not res:
   raise ValueError("RAMが取得できない")
ram = round(float(res[0]) / 1024, 3)
res = !nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits
if not res:
   raise ValueError("VRAMが取得できない(GPUに繋がってないかも)")
vram = round(float(res[0]) / 1024, 3)
print(f"RAM : {ram}")
print(f"VRAM: {vram}")
del res

#@markdown ON: conda Python 3.9 OFF: pip Python 3.8
use_conda = True #@param {type:"boolean"}
if use_conda:
   MINICONDA_SH='Miniconda3-py39_4.12.0-Linux-x86_64.sh' # Miniconda3-latest-Linux-x86_64.sh
   !wget https://repo.anaconda.com/miniconda/{MINICONDA_SH}
   !chmod +x {MINICONDA_SH}
   !./{MINICONDA_SH} -b -f -p /usr/local
   del MINICONDA_SH
   !conda update conda -y
   !conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3 -c pytorch -y
   !conda install xformers -c xformers/label/dev -y
else:
   !pip install pytorch_lightning --quiet
   !pip install triton --quiet
   !pip install --upgrade --no-cache-dir gdown httplib2 --quiet
   !pip install https://github.com/camenduru/stable-diffusion-webui-colab/releases/download/0.0.15/xformers-0.0.15.dev0+189828c.d20221207-cp38-cp38-linux_x86_64.whl --quiet

# 入ったPythonのバージョン確認
!python -V

# デフォルトパスワード生成
import secrets
import string

def get_password(length: int) -> str:
    # secretsはrandomとかと違って暗号学的に安全な乱数を生成できる。
    pass_chars = string.ascii_letters + string.digits
    password = ''.join(secrets.choice(pass_chars) for i in range(length))
    return password

default_password = get_password(64)

del secrets
del string
del get_password

if not password:
    password = default_password
    del default_password

# WEBUIのセットアップ
%cd /content/
!git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
%cd stable-diffusion-webui/models/Stable-diffusion

# ダウンロードにトークンの要らないモデルなのでコメントアウト
##@markdown トークンはここで貰ってきて https://huggingface.co/settings/tokens
#user_token = ''#@param {type:"string"}
#user_header = f"\"Authorization: Bearer {user_token}\""
#@markdown ckptのURLを入れる(自己責任)
ckpt_url1 = 'https://huggingface.co/acheong08/Anything/resolve/main/Anything-V3.0-pruned-fp32.ckpt'#@param {type:"string"}
ckpt_url2 = 'https://huggingface.co/cafeai/cafe-instagram-sd-1-5-v6/resolve/main/instagram-latest-plus-clip-v6e1_50000.safetensors'#@param {type:"string"}
ckpt_url3 = 'https://huggingface.co/hesw23168/SD-Elysium-Model/resolve/main/Elysium_V1.ckpt'#@param {type:"string"}
#!wget -c --header={user_header} "{ckpt_url}" -P /content/stable-diffusion-webui/models/Stable-diffusion/
if ckpt_url1:
   !wget -c "{ckpt_url1}" -P /content/stable-diffusion-webui/models/Stable-diffusion/
if ckpt_url2:
   !wget -c "{ckpt_url2}" -P /content/stable-diffusion-webui/models/Stable-diffusion/
if ckpt_url3:
   !wget -c "{ckpt_url3}" -P /content/stable-diffusion-webui/models/Stable-diffusion/
vae_url = "https://huggingface.co/acheong08/Anything/resolve/main/Anything-V3.0.vae.pt"#@param {type:"string"}
if vae_url:
   !wget -c "{vae_url}" -P /content/stable-diffusion-webui/models/Stable-diffusion/
#del user_header

# @markdown aria2cで落としたいモデルのURL
aria_url = ''#@param {type:"string"}
if aria_url:
    !apt install -y -qq aria2
    !aria2c --summary-interval=10 -x 3 --allow-overwrite=true -Z {aria_url}

#@markdown Extensionsのセットアップ
%cd /content/stable-diffusion-webui/extensions/
#@markdown 学習関連
use_train = True #@param {type:"boolean"}
if use_train:
   !git clone https://github.com/d8ahazard/sd_dreambooth_extension.git
   !git clone https://github.com/aria1th/Hypernetwork-MonkeyPatch-Extension.git
   !git clone https://github.com/aka7774/sd_katanuki.git
#@markdown マージ関連
use_merge = True #@param {type:"boolean"}
if use_merge:
   !git clone https://github.com/bbc-mc/sdweb-merge-board.git
   !git clone https://github.com/bbc-mc/sdweb-merge-block-weighted-gui.git
   !git clone https://github.com/aka7774/sd_merge_numa.git
   !git clone https://github.com/Akegarasu/sd-webui-model-converter.git
   !git clone https://github.com/camenduru/stable-diffusion-webui-huggingface.git
#@markdown 義妹(あとでffmpegとmoe-ttsを足したい)
use_gimai = True #@param {type:"boolean"}
if use_gimai:
   !git clone https://github.com/aka7774/sd_gimai.git
!git clone https://github.com/animerl/novelai-2-local-prompt.git
!git clone https://github.com/aka7774/sd_images_browser.git
!git clone https://github.com/aka7774/sd_copyguard.git
!git clone https://github.com/aka7774/sd_fake_xyplot.git
!git clone https://github.com/aka7774/sd_curly_rand.git
!git clone https://github.com/aka7774/sd_filer.git
!git clone https://github.com/aka7774/sd_infotexts.git
!git clone https://github.com/kousw/stable-diffusion-webui-daam.git
!echo '{"backup_dir":"/content/drive/MyDrive/sd"}' > /content/stable-diffusion-webui/extensions/sd_filer/json/config.json

# 一度起動して必要なものをインストールする
%cd /content/stable-diffusion-webui/
!COMMANDLINE_ARGS="--exit" REQS_FILE="requirements.txt" python launch.py

# large_model > 7GB
#!sed -i "s/'cpu'/devices.get_optimal_device()/g" modules/extras.py
# --lowvram

#@markdown Google Driveのマウント
use_drive = True #@param {type:"boolean"}
if use_drive:
   from google.colab import drive
   drive.mount('/content/drive')

# WEBUIの起動
!COMMANDLINE_ARGS="--xformers --opt-channelslast --share --gradio-auth {user}:{password}" REQS_FILE="requirements.txt" python launch.py
# --enable-insecure-extension-access

||=
[END]




